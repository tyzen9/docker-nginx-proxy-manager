services:
  # *****************************************************************************
  # nginx
  #   NGINX is a lightweight, high-performance web server and reverse proxy 
  #   designed for serving static content, handling SSL/TLS termination, and 
  #   efficiently routing traffic to backend applications. It can host multiple 
  #   sites, act as a load balancer, or serve as a secure entry point for 
  #   Dockerized services. Known for speed and scalability, NGINX is widely 
  #   used in modern web deployments to deliver reliable and secure content.
  #
  # *****************************************************************************
  nginx:
    image: jc21/nginx-proxy-manager:${NPM_VERSION_TAG}
    restart: unless-stopped
    container_name: nginx-proxy-manager
    ports:
      # These ports are in format <host-port>:<container-port>
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
      - '81:81' # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP
    environment:
      # Postgres parameters:
      - DB_POSTGRES_HOST=mysql
      - DB_POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - DB_POSTGRES_USER=${POSTGRES_USER:-npm}
      - DB_POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - DB_POSTGRES_NAME=${POSTGRES_DATABASE:-npm_db}
      # Uncomment this if IPv6 is not enabled on your host
      - DISABLE_IPV6=true
    volumes:
      - npm-data:/data
      - npm-letsencrypt:/etc/letsencrypt
    depends_on:
      - mysql

  # *****************************************************************************
  # mysql
  #   MySQL is a widely used open-source relational database management system. 
  #   It stores and organizes structured data, making it easy for applications 
  #   like websites, APIs, and backend services to manage information reliably. 
  #   Often paired with NGINX and other web technologies, MySQL provides the 
  #   persistence layer for dynamic content, user authentication, and analytics. 
  #   This service will create a database instance that can be accessed by 
  #   other containers in the stack.
  #
  # *****************************************************************************
  mysql:
    image: postgres:${POSTGRES_VERSION_TAG}
    container_name: nginx-proxy-manager-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-npm}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DATABASE:-npm_db}
    volumes:
      - npm-db:/var/lib/postgresql/data

volumes:
  npm-db:
    name: npm-db
  npm-data:
    name: npm-data
  npm-letsencrypt:
    name: npm-letsencrypt   