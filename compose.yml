name: npm

services:
  # *****************************************************************************
  # nginx-proxy-manager
  #   Nginx Proxy Manager (NPM) is a web-based interface for managing reverse 
  #   proxies, SSL certificates, and access control. It simplifies the process 
  #   of routing internet traffic to services running in your Docker stack by 
  #   providing an easy-to-use dashboard. Built on top of NGINX, it enables 
  #   you to configure domain names, enable HTTPS with Let's Encrypt, and set 
  #   up authentication without manually editing NGINX configuration files. 
  #   This service will act as the front door for your applications, securely 
  #   handling incoming requests and directing them to the right containers. 
  #
  # *****************************************************************************
  npm:
    image: jc21/nginx-proxy-manager:${NPM_VERSION_TAG}
    restart: unless-stopped
    container_name: nginx-proxy-manager
    ports:
      # These ports are in format <host-port>:<container-port>
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
      - '81:81' # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP
    environment:
      # Postgres parameters:
      - DB_POSTGRES_HOST=postgres
      - DB_POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - DB_POSTGRES_USER=${POSTGRES_USER:-npm}
      - DB_POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - DB_POSTGRES_NAME=${POSTGRES_DATABASE:-npm_db}
      # Uncomment this if IPv6 is not enabled on your host
      - DISABLE_IPV6=true
    volumes:
      - data:/data
      - letsencrypt:/etc/letsencrypt
    depends_on:
      - postgres

  # *****************************************************************************
  # postgres
  #   PostgreSQL is a powerful open-source relational database system known for 
  #   its reliability, performance, and advanced features. It serves as the 
  #   persistence layer for many modern applications, storing structured data 
  #   such as users, credentials, and configuration settings. When paired with 
  #   NGINX Proxy Manager, PostgreSQL provides the backend database needed to 
  #   manage proxy hosts, SSL certificates, access lists, and application data. 
  #   This service will create a dedicated database instance accessible by 
  #   Nginx Proxy Manager and other containers in the stack.
  #
  # *****************************************************************************
  postgres:
    image: postgres:${POSTGRES_VERSION_TAG}
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-npm}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DATABASE:-npm_db}
    volumes:
      - postgres:/var/lib/postgresql/data

  # *****************************************************************************
  # cloudflare-ddns
  #   Cloudflare DDNS keeps your Cloudflare DNS records updated with your 
  #   current public IP address. This is especially useful if your ISP 
  #   provides a dynamic IP, ensuring that your domain name always points 
  #   to the right address. By automatically updating DNS records, it 
  #   allows you to host websites, applications, or remote services at home 
  #   without worrying about manual DNS changes when your IP changes.
  #
  #   NOTE: Default update period is once every 5 minutes.  To change this and
  #         explore other configuration options, visit: https://github.com/favonia/cloudflare-ddns
  #
  # *****************************************************************************
  cloudflare-ddns:
    image: favonia/cloudflare-ddns:${CF_DDNS_VERSION_TAG}
    container_name: cloudflare-ddns
    network_mode: host
    restart: always
    # The user and group IDs to run as
    user: "${PUID:-1000}:${GUID:-1000}"
    # This container's filesystem can be read-only
    read_only: true
    # Run this container with bare minimum capabilities
    cap_drop: [all]
    # Restrict superuser privileges
    security_opt: [no-new-privileges:true]
    environment:
      - TZ=${TZ_ID}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - DOMAINS=${CF_DDNS_DOMAIN_LIST}
        # Disable IPv6
      - IP6_PROVIDER=none

volumes:
  data:
  letsencrypt:
  postgres:
